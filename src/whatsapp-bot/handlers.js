const bot = require('./bot');
const logger = require('../utils/logger');
const cvService = require('../core/cvService');
const interviewService = require('../core/interviewService');
const sessionService = require('../core/sessionService');
const videoProcessing = require('../utils/videoProcessing');
const openaiUtil = require('../utils/openaiUtil');
const fileProcessing = require('../utils/fileProcessing');
const { generateCVAnalysisPDF } = require('../utils/pdfGenerator');
const storageService = require('../utils/storageService');
const fs = require('fs-extra');
const path = require('path');
const axios = require('axios');
const userService = require('../core/userService');

const handleStart = async (from) => {
  try {
    logger.info('Firebase already initialized');

    // Obtener la sesi√≥n actual antes de resetearla
    const currentSession = await sessionService.getOrCreateSession(from);

    // Estados que indican que est√° en medio de una entrevista
    const interviewStates = [
      sessionService.SessionState.POSITION_RECEIVED,
      sessionService.SessionState.INTERVIEW_STARTED,
      sessionService.SessionState.QUESTION_ASKED,
      sessionService.SessionState.ANSWER_RECEIVED
    ];

    // Si est√° en medio de una entrevista, notificar y no resetear
    if (interviewStates.includes(currentSession.state)) {
      await bot.sendMessage(from, '‚ö†Ô∏è *¬°Espera un momento!* Ya tienes una entrevista en curso. Para reiniciar, env√≠a *!reset* primero. ¬°√Ånimo con tu entrevista actual! üöÄ');
      logger.info(`Start command ignored for user ${from} due to active interview session`);
      return;
    }

    // Si no est√° en entrevista, proceder con el reseteo normal
    await sessionService.resetSession(from);
    logger.info(`Session reset for user ${from}`);

    // Primero mostrar los t√©rminos y condiciones
    await handleTermsAndConditions(from);
  } catch (error) {
    logger.error(`Error in handleStart: ${error.message}`);
    await bot.sendMessage(from, 'üòì Lo siento, ha ocurrido un error al iniciar. Por favor, intenta nuevamente enviando *!start*.');
  }
};

/**
 * Manejar la selecci√≥n del men√∫ inicial
 * @param {string} from - ID del usuario
 * @param {string} selection - Opci√≥n seleccionada
 * @returns {Promise<void>}
 */
const handleMenuSelection = async (from, selection) => {
  try {
    logger.info(`Menu selection received from user ${from}: ${selection}`);

    switch (selection) {
      case 'review_cv':
        // Verificar si ya realiz√≥ un an√°lisis de CV anteriormente (usando userService)
        const shouldPay = await userService.shouldUserPayForCVAnalysis(from);

        if (shouldPay) {
          // Si ya analiz√≥ un CV anteriormente y no tiene cr√©ditos, mostrar mensaje claro
          // con opciones de comprar o volver al men√∫
          const remainingCredits = await userService.getRemainingCVCredits(from);

          if (remainingCredits <= 0) {
            // No tiene cr√©ditos, mostrar mensaje claro
            const noCreditsButtons = [
              { id: 'buy_credits', text: 'üí∞ Comprar revisiones' },
              { id: 'back_to_main_menu', text: 'üîô Volver al Men√∫' }
            ];

            await bot.sendButtonMessage(
              from,
              '‚ö†Ô∏è *Se te acabaron las revisiones de CV*\n\nActualmente no tienes cr√©ditos disponibles para analizar m√°s CVs. ¬øQuieres comprar m√°s revisiones o volver al men√∫ principal?',
              noCreditsButtons,
              'Sin cr√©ditos disponibles'
            );
          } else {
            // Tiene cr√©ditos premium, mostrar informaci√≥n normal de premium
            await handlePremiumInfo(from);
          }
        } else {
          // Primero preguntar por el puesto al que aspira
          await bot.sendMessage(from, '¬øA qu√© puesto aspiras? Describe brevemente el puesto y la industria. \n\n üìù(Ejemplo: ‚ÄúPracticante de ventas en Coca Cola o Analista de marketing en banca‚Äù).');
          // Crear un estado intermedio para indicar que estamos esperando el puesto antes del CV
          await sessionService.updateSessionState(from, 'waiting_for_position_before_cv');
          logger.info(`Asked for position before CV for user ${from}`);
        }
        break;

      case 'interview_simulation':
        // Para simulaci√≥n de entrevista, siempre preguntar por el puesto de trabajo
        // antes de comenzar, sin importar si ha analizado CV previamente o no
        await bot.sendMessage(from, '¬øA qu√© puesto aspiras? Describe brevemente el puesto y la industria. \n\n üìù(Ejemplo: ‚ÄúPracticante de ventas en Coca Cola o Analista de marketing en banca‚Äù).');
        await sessionService.updateSessionState(from, 'waiting_for_position_before_interview');
        logger.info(`Asked for position before interview for user ${from}`);
        break;

      default:
        // Opci√≥n no reconocida, mostrar men√∫ de nuevo
        const menuButtons = [
          { id: 'review_cv', text: 'üìã Revisar mi CV' },
          { id: 'interview_simulation', text: 'üéØ Simular entrevista' },
          { id: 'personalized_advice', text: 'üë®‚Äçüíº Asesor√≠a' }
        ];

        await bot.sendButtonMessage(
          from,
          'No reconozco esa opci√≥n. Si quieres simular una entrevista dale a Simular entrevista, si quieres analizar otro CV dale a Premium',
          menuButtons,
          '¬øAhora c√≥mo te ayudo?'
        );
        logger.info(`Invalid selection, menu re-sent to user ${from}`);
        break;
    }
  } catch (error) {
    logger.error(`Error handling menu selection: ${error.message}`);
    await bot.sendMessage(from, 'Lo siento, hubo un error al procesar tu selecci√≥n. Por favor, intenta nuevamente con !start.');
  }
};

const handleDocument = async (from, document) => {
  try {
    // Obtener sesi√≥n del usuario
    const session = await sessionService.getOrCreateSession(from);

    // Verificar si ya se proces√≥ este CV
    if (session.cvProcessed) {
      logger.info(`CV already processed for user ${from}`);
      return;
    }

    // Verificar si ya tiene an√°lisis previos (usando userService)
    const shouldPay = await userService.shouldUserPayForCVAnalysis(from);

    if (shouldPay) {
      logger.info(`User ${from} has already analyzed a CV and needs to pay for more`);
      await handlePremiumInfo(from);
      return;
    }

    // Verificar si necesita usar un cr√©dito
    const analysisCount = await userService.getCVAnalysisCount(from);
    if (analysisCount > 0) {
      // No es su primer an√°lisis, as√≠ que debe tener cr√©ditos (comprobado en shouldUserPayForCVAnalysis)
      // Usar un cr√©dito
      await userService.useCVCredit(from);
      logger.info(`Used 1 credit for user ${from} for CV analysis`);
    }

    // Validar documento
    if (!document) {
      logger.error('Document object is null or undefined');
      throw new Error('Documento no recibido');
    }

    logger.info(`Document object received: ${JSON.stringify(document, null, 2)}`);

    if (!document.id) {
      logger.error('Document ID is missing');
      throw new Error('ID de documento no v√°lido');
    }

    // Marcar que estamos procesando un CV y guardarlo en la sesi√≥n
    await sessionService.updateSession(from, {
      cvProcessed: true,
      processingCV: true,
      processingStartTime: Date.now(),
      lastDocumentId: document.id
    });

    // Enviar mensaje de procesamiento
    await bot.sendMessage(from, 'üìÑ *¬°Gracias por compartir tu CV!* üôè\n\nEstoy analiz√°ndolo detalladamente para ofrecerte retroalimentaci√≥n valiosa. Este proceso puede tomar entre 2-3 minutos... ‚è≥\n\nEl an√°lisis se est√° realizando en un servidor externo, por favor ten paciencia.');

    // Obtener el puesto de trabajo si existe
    const jobPosition = session.jobPosition || 'Puesto no especificado';

    // Obtener la URL del documento usando el MediaProcessor de WhatsApp
    const mediaUrl = await bot.getMediaUrl(document.id);
    if (!mediaUrl) {
      throw new Error('No se pudo obtener la URL del documento');
    }

    logger.info(`Document media URL obtained: ${mediaUrl}`);
    document.url = mediaUrl;

    try {
      // Procesar el CV usando el endpoint real
      const cvService = require('../core/cvService');
      const analysis = await cvService.processCV(document, from, jobPosition);

      // Extraer solo la URL del an√°lisis para guardar
      let analysisUrl;
      if (typeof analysis === 'string') {
        analysisUrl = analysis;
      } else if (analysis && analysis.pdfUrl) {
        analysisUrl = analysis.pdfUrl;
      } else if (analysis && analysis.url) {
        analysisUrl = analysis.url;
      } else {
        // URL de respaldo si no se pudo extraer del an√°lisis
        analysisUrl = `https://myworkinpe.lat/pdfs/cv_${Date.now()}.pdf`;
        logger.info(`No URL found in analysis response, using fallback URL: ${analysisUrl}`);
      }

      logger.info(`Analysis URL extracted: ${analysisUrl}`);

      // Guardar solo la URL del an√°lisis en la sesi√≥n, NO el an√°lisis completo
      await sessionService.saveCVAnalysis(from, analysisUrl);

      // Actualizar la sesi√≥n solo con la URL, no con el objeto de an√°lisis completo
      await sessionService.updateSession(from, {
        previousAnalysis: session.previousAnalysis ? [...session.previousAnalysis, analysisUrl] : [analysisUrl],
        processingCV: false,  // Marcar como finalizado el procesamiento
        lastPdfUrl: analysisUrl  // Guardar la URL para f√°cil acceso
      });

      // Registrar el an√°lisis en el historial permanente de usuario (solo URL)
      await userService.recordCVAnalysis(from, { url: analysisUrl }, jobPosition);

      // Enviar mensaje de an√°lisis completado
      await bot.sendMessage(from, '‚úÖ *¬°An√°lisis completado!* üéâ\n\nHe revisado tu CV y he preparado un informe detallado con todas mis observaciones.');

      try {
        // Esperar un momento antes de enviar el enlace para evitar problemas de l√≠mites de velocidad
        await new Promise(resolve => setTimeout(resolve, 2000));

        // Enviar SOLO la URL sin formato adicional
        logger.info(`Intentando enviar URL simple: ${analysisUrl}`);
        await bot.sendMessage(from, analysisUrl);

        // Esperar antes de enviar las opciones
        await new Promise(resolve => setTimeout(resolve, 2000));

        // Enviar mensaje adicional con instrucciones
        await bot.sendMessage(from, 'Haz clic en el enlace anterior para ver tu an√°lisis completo en PDF');

        // Enviar opciones post-an√°lisis como texto simple
        await sendPostCVOptions(from);
      } catch (messageError) {
        logger.error(`Error sending PDF link message: ${messageError.message}`);
        // En caso de error al enviar el enlace, intentar con un formato a√∫n m√°s simple
        try {
          logger.info('Intentando enviar URL con formato alternativo');
          await bot.sendMessage(from, analysisUrl);
        } catch (simpleMessageError) {
          logger.error(`Error sending alternate link: ${simpleMessageError.message}`);
        }
      }

      logger.info(`CV analysis process completed for user ${from}. PDF URL: ${analysisUrl}`);
      return analysisUrl;
    } catch (error) {
      // En caso de error, asegurarse de marcar el procesamiento como finalizado
      await sessionService.updateSession(from, { processingCV: false });
      throw error;
    }
  } catch (error) {
    logger.error(`Error handling document: ${error.message}`);
    await bot.sendMessage(from, `‚ö†Ô∏è Lo siento, ocurri√≥ un error al procesar tu CV: ${error.message}. Por favor, intenta nuevamente m√°s tarde.`);
  }
};

const handleText = async (from, text) => {
  try {
    logger.info('Firebase already initialized');
    const session = await sessionService.getOrCreateSession(from);
    logger.info(`Session retrieved for user: ${from}, state: ${session.state}`);

    logger.info(`Handling text message from user ${from} in state: ${session.state}`);

    // Si es un usuario nuevo o est√° en estado inicial y es su primer mensaje
    if (session.state === sessionService.SessionState.INITIAL && !session.hasReceivedWelcomeMessage) {
      // Marcar que ya recibi√≥ el mensaje de bienvenida
      await sessionService.updateSession(from, { hasReceivedWelcomeMessage: true });

      // Mostrar mensaje de bienvenida como si hubiera enviado !start
      await handleStart(from);
      return;
    }

    // Manejar comandos especiales primero
    if (text.toLowerCase().startsWith('!')) {
      const command = text.toLowerCase().substring(1);
      switch (command) {
        case 'start':
          await handleStart(from);
          return;
        case 'help':
          await handleHelp(from);
          return;
        case 'reset':
          await sessionService.resetSession(from);
          await handleStart(from);
          return;
        case 'clearsession':
          // Comando especial para limpiar la sesi√≥n cuando est√° muy grande
          await sessionService.resetSession(from);
          await bot.sendMessage(from, '‚úÖ Tu sesi√≥n ha sido reiniciada correctamente. Ahora puedes continuar usando el bot normalmente. Usa !start para comenzar de nuevo.');
          return;
        case 'pdf':
        case 'url':
        case 'link':
          // Enviar la URL del √∫ltimo PDF generado
          if (session.lastPdfUrl) {
            await bot.sendMessage(from, `üìä *Aqu√≠ est√° el enlace a tu PDF de an√°lisis:*\n\n${session.lastPdfUrl}`);
          } else {
            await bot.sendMessage(from, 'No tienes ning√∫n PDF generado recientemente. Env√≠a tu CV para generar un an√°lisis.');
          }
          return;
        default:
          await bot.sendMessage(from, 'Comando no reconocido. Usa !help para ver los comandos disponibles.');
          return;
      }
    }

    // Comprobar si el texto pide la URL del PDF
    if (text.toLowerCase().includes('url') &&
      (text.toLowerCase().includes('pdf') || text.toLowerCase().includes('an√°lisis') || text.toLowerCase().includes('analisis'))) {
      // Enviar la URL del √∫ltimo PDF generado
      if (session.lastPdfUrl) {
        await bot.sendMessage(from, `üìä *Aqu√≠ est√° el enlace a tu PDF de an√°lisis:*\n\n${session.lastPdfUrl}`);
      } else {
        await bot.sendMessage(from, 'No tienes ning√∫n PDF generado recientemente. Env√≠a tu CV para generar un an√°lisis.');
      }
      return;
    }

    // Manejar mensajes normales seg√∫n el estado
    switch (session.state) {
      case 'initial':
        // Si el usuario est√° en estado inicial, mostrar el men√∫ de opciones
        const menuButtons = [
          { id: 'review_cv', text: 'Revisar mi CV' },
          { id: 'interview_simulation', text: 'Simular entrevista' },
          { id: 'personalized_advice', text: 'üë®‚Äçüíº Asesor√≠a' }
        ];

        await bot.sendButtonMessage(
          from,
          'Selecciona una opci√≥n para continuar:',
          menuButtons,
          '¬øEn qu√© puedo ayudarte hoy?'
        );
        await sessionService.updateSessionState(from, sessionService.SessionState.MENU_SELECTION);
        break;
      case 'terms_acceptance':
        // Si el usuario est√° en el estado de aceptaci√≥n de t√©rminos
        if (text.toLowerCase().includes('si') ||
          text.toLowerCase().includes('s√≠') ||
          text.toLowerCase().includes('acepto')) {
          // Usuario acepta los t√©rminos por texto
          logger.info(`User ${from} accepted terms and conditions via text`);
          await showWelcomeMessage(from);
        } else if (text.toLowerCase().includes('no') ||
          text.toLowerCase().includes('rechazo')) {
          // Usuario rechaza los t√©rminos por texto
          logger.info(`User ${from} rejected terms and conditions via text`);
          await bot.sendMessage(from, 'Para utilizar nuestros servicios es necesario aceptar los t√©rminos y condiciones. Sin esta aceptaci√≥n, no podemos continuar.');
          await handleTermsAndConditions(from);
        } else {
          // Mensaje no reconocido, volver a mostrar los t√©rminos
          await bot.sendMessage(from, 'Por favor, responde "S√≠" si aceptas los t√©rminos y condiciones o "No" si los rechazas.');
          await handleTermsAndConditions(from);
        }
        break;
      case sessionService.SessionState.MENU_SELECTION:
        // Intentar interpretar el texto como una opci√≥n del men√∫
        if (text.toLowerCase().includes('revisar') || text.toLowerCase().includes('cv')) {
          await handleMenuSelection(from, 'review_cv');
        } else if (text.toLowerCase().includes('simular') || text.toLowerCase().includes('entrevista')) {
          await handleMenuSelection(from, 'interview_simulation');
        } else if (text.toLowerCase().includes('asesor') || text.toLowerCase().includes('personal')) {
          await handleButtonReply(from, 'personalized_advice');
        } else {
          // Si no se reconoce la opci√≥n, mostrar el men√∫ nuevamente
          const menuButtons = [
            { id: 'review_cv', text: 'Revisar mi CV' },
            { id: 'interview_simulation', text: 'Simular entrevista' },
            { id: 'personalized_advice', text: 'üë®‚Äçüíº Asesor√≠a' }
          ];

          await bot.sendButtonMessage(
            from,
            'No reconozco esa opci√≥n. Por favor, selecciona una de las siguientes:',
            menuButtons,
            '¬øEn qu√© puedo ayudarte hoy?'
          );
        }
        break;
      case sessionService.SessionState.WAITING_INTERVIEW_CONFIRMATION:
        // Usuario confirmando si quiere comenzar la entrevista
        if (text.toLowerCase() === 's√≠' || text.toLowerCase() === 'si' ||
          text.toLowerCase().includes('listo') || text.toLowerCase().includes('comenzar')) {
          await startInterviewQuestions(from);
        } else if (text.toLowerCase() === 'no' || text.toLowerCase().includes('cancel')) {
          await bot.sendMessage(from, 'Entrevista cancelada. Si deseas volver a intentarlo, env√≠a !start para comenzar de nuevo.');
          await sessionService.updateSessionState(from, sessionService.SessionState.INITIAL);
        } else {
          await bot.sendMessage(from, 'Por favor, responde "s√≠" si est√°s listo para comenzar la entrevista o "no" para cancelar.');
        }
        break;
      case sessionService.SessionState.POST_CV_OPTIONS:
        // Manejar opciones despu√©s del an√°lisis del CV
        if (text.toLowerCase() === 's√≠' || text.toLowerCase() === 'si' ||
          text.toLowerCase().includes('simular') || text.toLowerCase().includes('entrevista')) {
          // Iniciar simulaci√≥n de entrevista
          await sessionService.updateSessionState(from, sessionService.SessionState.POSITION_RECEIVED);
          await handleInterview(from);
        } else if (text.toLowerCase().includes('revisar') || text.toLowerCase().includes('otro cv') ||
          text.toLowerCase().includes('nuevo cv')) {

          // Verificar historial de an√°lisis (usando userService)
          const shouldPay = await userService.shouldUserPayForCVAnalysis(from);

          if (shouldPay) {
            // Mostrar mensaje de versi√≥n premium
            await handlePremiumInfo(from);
          } else {
            // Reiniciar el proceso para revisar otro CV, manteniendo el puesto
            await sessionService.updateSession(from, { cvProcessed: false });
            await bot.sendMessage(from, 'Por favor, env√≠a el nuevo CV que deseas analizar.');
            await sessionService.updateSessionState(from, 'waiting_for_cv');
          }
        } else if (text.toLowerCase().includes('premium')) {
          // Mostrar informaci√≥n sobre la versi√≥n premium
          await handlePremiumInfo(from);
        } else {
          // No se reconoce el comando, mostrar opciones disponibles
          const totalAnalysisCount = await userService.getCVAnalysisCount(from);
          const hasAnalyzedCVBefore = totalAnalysisCount > 1;

          let menuButtons = [
            { id: 'start_interview', text: 'üéØ Simular entrevista' }
          ];

          if (hasAnalyzedCVBefore) {
            //Cambiar el Premium por Otro CV pero igual
            menuButtons.push({ id: 'premium_required', text: '‚ú® Premium' });
          } else {
            menuButtons.push({ id: 'review_cv_again', text: 'üìã Otro CV' });
          }

          await bot.sendButtonMessage(
            from,
            'No reconozco esa opci√≥n. ¬øQu√© te gustar√≠a hacer ahora?',
            menuButtons,
            'Opciones disponibles:'
          );
        }
        break;
      case sessionService.SessionState.WAITING_FOR_POSITION_BEFORE_CV:
        // El usuario est√° enviando la posici√≥n antes de enviar el CV
        // Guardar la posici√≥n en la sesi√≥n
        await sessionService.saveJobPosition(from, text);
        logger.info(`Job position saved before CV for user ${from}: ${text}`);

        // Solicitar el CV
        await bot.sendMessage(from, `Gracias por indicar el puesto de ${text}. Ahora, por favor env√≠a tu CV en formato **PDF** como documento para analizarlo en relaci√≥n con este puesto.`);
        await sessionService.updateSessionState(from, 'waiting_for_cv');
        break;

      case 'waiting_for_position_before_interview':
        // El usuario est√° enviando la posici√≥n antes de la simulaci√≥n de entrevista
        // Guardar la posici√≥n en la sesi√≥n
        await sessionService.saveJobPosition(from, text);
        logger.info(`Job position saved before interview for user ${from}: ${text}`);

        // Actualizar estado y continuar con la entrevista
        await sessionService.updateSessionState(from, sessionService.SessionState.POSITION_RECEIVED);

        // Iniciar la entrevista con el puesto proporcionado
        await handleInterview(from);
        break;
      case sessionService.SessionState.POSITION_ASKED:
        // Usuario respondiendo a la pregunta sobre el puesto
        await handleJobPosition(from, text);
        break;
      case sessionService.SessionState.POSITION_RECEIVED:
        // Usuario confirmando que quiere comenzar la entrevista
        if (text.toLowerCase() === 's√≠' || text.toLowerCase() === 'si') {
          await handleInterview(from);
        } else {
          await bot.sendMessage(from, 'Para comenzar la entrevista, responde "s√≠". Si deseas reiniciar el proceso, env√≠a !reset.');
        }
        break;
      case sessionService.SessionState.ANSWER_RECEIVED:
        // Usuario confirmando que quiere continuar con la siguiente pregunta
        if (text.toLowerCase() === 's√≠' || text.toLowerCase() === 'si') {
          await handleNextQuestion(from);
        } else {
          await bot.sendMessage(from, 'Para continuar con la siguiente pregunta, responde "s√≠". Si deseas reiniciar el proceso, env√≠a !reset.');
        }
        break;
      case sessionService.SessionState.QUESTION_ASKED:
        // Usuario respondiendo a una pregunta de entrevista con texto (no ideal)
        await bot.sendMessage(from, 'üé§ *¬°Prefiero escucharte!* Por favor, responde a la pregunta con un mensaje de *audio* o *video* para que pueda evaluar mejor tu respuesta. ¬°Esto har√° el an√°lisis mucho m√°s completo! üòä');
        break;
      case sessionService.SessionState.INTERVIEW_COMPLETED:
        // Cuando recibimos cualquier mensaje despu√©s de completar la entrevista,
        // autom√°ticamente reiniciamos el proceso como si el usuario hubiera enviado !reset
        logger.info(`User ${from} sent a message after interview completion. Auto-resetting session.`);
        await sessionService.resetSession(from);
        await handleStart(from);
        break;
      case 'selecting_premium_package':
        // Verificar si es una respuesta a la lista interactiva
        if (session.interactive && session.interactive.list_reply) {
          const selectedId = session.interactive.list_reply.id;
          await handlePackageSelection(from, selectedId);
        } else if (text.toLowerCase().includes('menu') ||
          text.toLowerCase().includes('regresar') ||
          text.toLowerCase().includes('volver') ||
          text.toLowerCase().includes('atras') ||
          text.toLowerCase().includes('atr√°s') ||
          text.toLowerCase().includes('inicio')) {
          // El usuario quiere volver al men√∫ principal
          await sessionService.resetSession(from);
          await handleStart(from);
        } else {
          // Intentar procesar la selecci√≥n - si no coincide con un paquete,
          // handlePackageSelection se encargar√° de volver a mostrar las opciones
          await handlePackageSelection(from, text);
        }
        break;
      case 'confirming_payment':
        if (text.toLowerCase().includes('pag') || text.toLowerCase().includes('ya pag')) {
          await handlePaymentConfirmation(from);
        } else if (text.toLowerCase().includes('volver') || text.toLowerCase().includes('atr√°s') || text.toLowerCase().includes('atras')) {
          await handlePremiumInfo(from);
        } else {
          await bot.sendMessage(from, 'Por favor, confirma si has realizado el pago o si deseas volver a la selecci√≥n de paquetes.');
        }
        break;
      case 'advisor_service_selection':
        if (text.toLowerCase().includes('acept') || text.toLowerCase() === 'si' || text.toLowerCase() === 's√≠') {
          // Usuario acepta la asesor√≠a por texto
          await handleButtonReply(from, 'accept_advisor');
        } else if (text.toLowerCase().includes('regres') || text.toLowerCase().includes('volver') ||
          text.toLowerCase().includes('menu') || text.toLowerCase().includes('cancel')) {
          // Usuario quiere volver al men√∫ principal
          await sessionService.resetSession(from);
          await handleStart(from);
        } else {
          await bot.sendMessage(from, 'Por favor, responde "ACEPTAR" si deseas continuar con la asesor√≠a o "REGRESAR" para volver al men√∫ principal.');
        }
        break;
      case 'selecting_advisor_type':
        if (text.toLowerCase().includes('cv') || text.toLowerCase().includes('revisar')) {
          // Usuario quiere asesor√≠a para revisi√≥n de CV
          await handleButtonReply(from, 'advisor_cv_review');
        } else if (text.toLowerCase().includes('entrevista') || text.toLowerCase().includes('simular')) {
          // Usuario quiere asesor√≠a para simulaci√≥n de entrevista
          await handleButtonReply(from, 'advisor_interview');
        } else if (text.toLowerCase().includes('regres') || text.toLowerCase().includes('volver') ||
          text.toLowerCase().includes('menu') || text.toLowerCase().includes('cancel')) {
          // Usuario quiere volver al men√∫ principal
          await sessionService.resetSession(from);
          await handleStart(from);
        } else {
          await bot.sendMessage(from, 'Por favor, indica si deseas asesor√≠a para "Revisar CV" o "Simular Entrevista", o escribe "regresar" para volver al men√∫ principal.');
        }
        break;
      case 'confirming_advisor_payment':
        if (text.toLowerCase().includes('pag') || text.toLowerCase().includes('ya pag')) {
          await handleAdvisorPaymentConfirmation(from);
        } else if (text.toLowerCase().includes('volver') || text.toLowerCase().includes('atr√°s') ||
          text.toLowerCase().includes('atras') || text.toLowerCase().includes('cancel')) {
          await handleAdvisorService(from);
        } else {
          await bot.sendMessage(from, 'Por favor, confirma si has realizado el pago o si deseas volver a la informaci√≥n de asesor√≠a.');
        }
        break;
      default:
        await bot.sendMessage(from, 'Por favor, env√≠a tu CV como documento para que pueda analizarlo.');
    }

    logger.info(`Text message handled for user ${from}`);
  } catch (error) {
    logger.error(`Error handling text message: ${error.message}`);
    await bot.sendMessage(from, 'Lo siento, hubo un error al procesar tu mensaje. Por favor, intenta nuevamente.');
  }
};

const handleJobPosition = async (from, positionText) => {
  try {
    // Guardar puesto en la sesi√≥n
    await sessionService.saveJobPosition(from, positionText);
    logger.info(`Job position saved for user ${from}: ${positionText}`);

    // Confirmar recepci√≥n y explicar pr√≥ximos pasos
    const confirmMessage = `
Gracias por proporcionar el puesto de trabajo: *${positionText}*

Ahora comenzaremos con la simulaci√≥n de entrevista. Te har√© 4 preguntas relacionadas con el puesto.

Para cada pregunta:
1. Responde con un mensaje de audio o video
2. Yo analizar√© tu respuesta y te dar√© retroalimentaci√≥n
3. Luego pasaremos a la siguiente pregunta

¬øEst√°s listo/a para comenzar la entrevista? Responde "s√≠" para continuar.
    `;

    await bot.sendMessage(from, confirmMessage);
    logger.info(`Sent interview introduction to user ${from}`);
  } catch (error) {
    logger.error(`Error handling job position: ${error.message}`);
    await bot.sendMessage(from, 'Lo siento, hubo un error al procesar tu respuesta. Por favor, intenta nuevamente.');
    throw error;
  }
};

const handleImage = async (from, image) => {
  try {
    logger.info(`Received image from user ${from}: ${JSON.stringify(image, null, 2)}`);

    // Obtener la sesi√≥n del usuario
    const session = await sessionService.getOrCreateSession(from);
    logger.info(`User session state when receiving image: ${session.state}`);

    // Verificar estado para determinar qu√© hacer con la imagen
    if (session.state === 'waiting_payment_screenshot') {
      // Procesar captura de pantalla para pago de premium
      logger.info(`Processing payment screenshot for user ${from}`);
      await verifyPaymentScreenshot(from, image);
    } else if (session.state === 'waiting_advisor_payment_screenshot') {
      // Procesar captura de pantalla para pago de asesor√≠a
      logger.info(`Processing advisor payment screenshot for user ${from}`);
      await verifyAdvisorPaymentScreenshot(from, image);
    } else {
      // Para debugging: mostrar el estado actual
      logger.info(`Image received but user ${from} is not in payment verification flow. Current state: ${session.state}`);

      // Si estamos en estado de confirmaci√≥n de pago, asumimos que la imagen es un comprobante
      if (session.state === 'confirming_payment') {
        logger.info(`User ${from} is in confirming_payment state, treating image as payment screenshot`);
        // Actualizar el estado a waiting_payment_screenshot
        await sessionService.updateSessionState(from, 'waiting_payment_screenshot');
        // Procesar la imagen como comprobante de pago
        await verifyPaymentScreenshot(from, image);
      } else if (session.state === 'confirming_advisor_payment') {
        logger.info(`User ${from} is in confirming_advisor_payment state, treating image as advisor payment screenshot`);
        // Actualizar el estado a waiting_advisor_payment_screenshot
        await sessionService.updateSessionState(from, 'waiting_advisor_payment_screenshot');
        // Procesar la imagen como comprobante de pago de asesor√≠a
        await verifyAdvisorPaymentScreenshot(from, image);
      } else {
        // No estamos esperando una imagen espec√≠fica, informar al usuario
        await bot.sendMessage(from, 'Gracias por la imagen. Por favor, env√≠a !start si deseas comenzar a usar el bot o !help para obtener ayuda.');
      }
    }
  } catch (error) {
    logger.error(`Error handling image: ${error.message}`);
    await bot.sendMessage(from, 'Lo siento, hubo un error al procesar tu imagen. Por favor, intenta nuevamente.');
  }
};

const handleAudio = async (from, audio) => {
  try {
    // Obtener sesi√≥n del usuario
    const session = await sessionService.getOrCreateSession(from);

    if (session.state !== sessionService.SessionState.QUESTION_ASKED) {
      await bot.sendMessage(from, 'Por favor, espera a que te haga una pregunta antes de enviar una respuesta de audio.');
      return;
    }

    // Enviar mensaje de procesamiento
    await bot.sendMessage(from, 'Estoy procesando tu respuesta. Esto puede tomar unos momentos...');

    // Obtener URL del audio
    const audioUrl = await bot.getMediaUrl(audio.id);

    if (!audioUrl) {
      throw new Error('No se pudo obtener la URL del audio');
    }

    logger.info(`Audio URL obtenida: ${audioUrl}`);

    try {
      // Descargar el archivo de audio
      logger.info(`Descargando audio para usuario ${from}`);
      const audioBuffer = await fileProcessing.downloadFile(audioUrl);
      logger.info(`Audio descargado, tama√±o: ${audioBuffer.length} bytes`);

      // Obtener la pregunta actual
      const currentQuestion = session.questions[session.currentQuestion];
      let transcription = null;
      let analysis = null;
      let errorOccurred = false;

      // Transcribir el audio con Whisper
      try {
        logger.info('Transcribiendo audio con Whisper...');
        transcription = await openaiUtil.transcribeAudio(audioBuffer, {
          language: "es",
          prompt: "Esta es una respuesta a una pregunta de entrevista de trabajo."
        });

        if (transcription) {
          logger.info(`Audio transcrito exitosamente: ${transcription.length} caracteres`);

          // Analizar la transcripci√≥n
          logger.info('Analizando respuesta de entrevista...');
          analysis = await openaiUtil.analyzeInterviewResponse(transcription, currentQuestion.question);
          logger.info('An√°lisis de respuesta completado');
        } else {
          errorOccurred = true;
          logger.error("Error al transcribir el audio");
        }
      } catch (transcriptError) {
        errorOccurred = true;
        logger.error(`Error durante la transcripci√≥n/an√°lisis: ${transcriptError.message}`);
      }

      // Si hay un error o no se puede hacer an√°lisis real, usar simulaci√≥n
      if (errorOccurred || !analysis) {
        logger.info('Usando an√°lisis simulado debido a error o falta de configuraci√≥n');
        analysis = interviewService.generateMockInterviewAnalysis(currentQuestion);

        if (!transcription) {
          transcription = "Transcripci√≥n no disponible. Usando an√°lisis simulado.";
        }
      }

      // Guardar respuesta y an√°lisis
      const answer = {
        transcription: transcription,
        analysis: analysis,
        timestamp: new Date()
      };

      await sessionService.saveInterviewAnswer(from, answer);
      logger.info('Respuesta y an√°lisis guardados en la sesi√≥n');

      // Enviar feedback
      const feedbackMessage = formatInterviewFeedback(analysis, currentQuestion);
      await bot.sendMessage(from, feedbackMessage);

      // Verificar si debemos seguir con m√°s preguntas
      const updatedSession = await sessionService.getOrCreateSession(from);

      if (updatedSession.currentQuestion >= 3 || updatedSession.state === sessionService.SessionState.INTERVIEW_COMPLETED) {
        // Entrevista completada
        await sessionService.updateSessionState(from, sessionService.SessionState.INTERVIEW_COMPLETED);
        await showPostInterviewMenu(from);
      } else {
        // Preguntar si quiere continuar usando botones
        await bot.sendButtonMessage(
          from,
          '¬øQuieres continuar con la siguiente pregunta? ü§î',
          [
            { id: 'continue_interview', text: '‚úÖ S√≠, continuar' },
            { id: 'stop_interview', text: '‚ùå Detener' }
          ],
          'üéØ Progreso de entrevista'
        );
      }
    } catch (processingError) {
      logger.error(`Error procesando audio: ${processingError.message}`);
      await bot.sendMessage(from, 'üòì Lo siento, hubo un error al procesar tu respuesta. ¬øPodr√≠as intentar nuevamente? Aseg√∫rate de que el audio/video sea claro. ¬°Gracias por tu paciencia! üôè');
    }
  } catch (error) {
    logger.error(`Error handling audio: ${error.message}`);
    await bot.sendMessage(from, 'Lo siento, hubo un error al procesar tu audio. Por favor, intenta nuevamente.');
    throw error;
  }
};

const handleVideo = async (from, video) => {
  try {
    // Obtener sesi√≥n del usuario
    const session = await sessionService.getOrCreateSession(from);

    if (session.state !== sessionService.SessionState.QUESTION_ASKED) {
      //await bot.sendMessage(from, 'Por favor, espera a que te haga una pregunta antes de enviar una respuesta en video.');
      return;
    }

    // Enviar mensaje de procesamiento
    await bot.sendMessage(from, 'Estoy procesando tu respuesta en video. Esto puede tomar unos momentos...');

    // Obtener URL del video
    const videoUrl = await bot.getMediaUrl(video.id);

    if (!videoUrl) {
      throw new Error('No se pudo obtener la URL del video');
    }

    logger.info(`Video URL obtenida: ${videoUrl}`);

    try {
      // Procesar el video y extraer el audio
      logger.info(`Procesando video para usuario ${from}`);
      const audioBuffer = await videoProcessing.processVideoFromUrl(videoUrl);
      logger.info(`Audio extra√≠do del video, tama√±o: ${audioBuffer.length} bytes`);

      // Obtener la pregunta actual
      const currentQuestion = session.questions[session.currentQuestion];
      let transcription = null;
      let analysis = null;
      let errorOccurred = false;

      // Transcribir el audio con Whisper
      try {
        logger.info('Transcribiendo audio con Whisper...');
        transcription = await openaiUtil.transcribeAudio(audioBuffer, {
          language: "es",
          prompt: "Esta es una respuesta a una pregunta de entrevista de trabajo."
        });

        if (transcription) {
          logger.info(`Audio transcrito exitosamente: ${transcription.length} caracteres`);

          // Analizar la transcripci√≥n
          logger.info('Analizando respuesta de entrevista...');
          analysis = await openaiUtil.analyzeInterviewResponse(transcription, currentQuestion.question);
          logger.info('An√°lisis de respuesta completado');
        } else {
          errorOccurred = true;
          logger.error("Error al transcribir el audio");
        }
      } catch (transcriptError) {
        errorOccurred = true;
        logger.error(`Error durante la transcripci√≥n/an√°lisis: ${transcriptError.message}`);
      }

      // Si hay un error o no se puede hacer an√°lisis real, usar simulaci√≥n
      if (errorOccurred || !analysis) {
        logger.info('Usando an√°lisis simulado debido a error o falta de configuraci√≥n');
        analysis = interviewService.generateMockInterviewAnalysis(currentQuestion);

        if (!transcription) {
          transcription = "Transcripci√≥n no disponible. Usando an√°lisis simulado.";
        }
      }

      // Guardar respuesta y an√°lisis
      const answer = {
        transcription: transcription,
        analysis: analysis,
        timestamp: new Date()
      };

      await sessionService.saveInterviewAnswer(from, answer);
      logger.info('Respuesta y an√°lisis guardados en la sesi√≥n');

      // Enviar feedback
      const feedbackMessage = formatInterviewFeedback(analysis, currentQuestion);
      await bot.sendMessage(from, feedbackMessage);

      // Verificar si debemos seguir con m√°s preguntas
      const updatedSession = await sessionService.getOrCreateSession(from);

      if (updatedSession.currentQuestion >= 3 || updatedSession.state === sessionService.SessionState.INTERVIEW_COMPLETED) {
        // Entrevista completada
        await sessionService.updateSessionState(from, sessionService.SessionState.INTERVIEW_COMPLETED);
        await showPostInterviewMenu(from);
      } else {
        // Preguntar si quiere continuar usando botones
        await bot.sendButtonMessage(
          from,
          '¬øQuieres continuar con la siguiente pregunta? ü§î',
          [
            { id: 'continue_interview', text: '‚úÖ S√≠, continuar' },
            { id: 'stop_interview', text: '‚ùå Detener' }
          ],
          'üéØ Progreso de entrevista'
        );
      }
    } catch (processingError) {
      logger.error(`Error procesando video: ${processingError.message}`);
      await bot.sendMessage(from, 'Lo siento, hubo un error al procesar tu video. Por favor, intenta nuevamente.');
    }
  } catch (error) {
    logger.error(`Error handling video: ${error.message}`);
    await bot.sendMessage(from, 'Lo siento, hubo un error al procesar tu video. Por favor, intenta nuevamente.');
    throw error;
  }
};

const handleSimulatedAnswer = async (from, session) => {
  try {
    // Simular un an√°lisis de respuesta
    const currentQuestion = session.questions[session.currentQuestion];
    const mockAnalysis = interviewService.generateMockInterviewAnalysis(currentQuestion);

    // Guardar respuesta y an√°lisis
    const answer = {
      transcription: "Respuesta simulada para demostraci√≥n",
      analysis: mockAnalysis,
      timestamp: new Date()
    };

    await sessionService.saveInterviewAnswer(from, answer);

    // Enviar feedback
    const feedbackMessage = formatInterviewFeedback(mockAnalysis, currentQuestion);
    await bot.sendMessage(from, feedbackMessage);

    // Verificar si debemos seguir con m√°s preguntas
    const updatedSession = await sessionService.getOrCreateSession(from);

    if (updatedSession.state === sessionService.SessionState.INTERVIEW_COMPLETED) {
      // Entrevista completada
      await showPostInterviewMenu(from);
    } else {
      // Preguntar si quiere continuar usando botones
      await bot.sendButtonMessage(
        from,
        '¬øQuieres continuar con la siguiente pregunta? ü§î',
        [
          { id: 'continue_interview', text: '‚úÖ S√≠, continuar' },
          { id: 'stop_interview', text: '‚ùå Detener' }
        ],
        'üéØ Progreso de entrevista'
      );
    }

  } catch (error) {
    logger.error(`Error in simulated answer: ${error.message}`);
    throw error;
  }
};

const handleUnknown = async (from) => {
  try {
    await bot.sendMessage(
      from,
      'Lo siento, no puedo procesar este tipo de mensaje. Por favor, env√≠a tu CV como documento.'
    );
    logger.info(`Unknown message type received from user ${from}`);
  } catch (error) {
    logger.error(`Error handling unknown message type: ${error.message}`);
    throw error;
  }
};

const handleHelp = async (from) => {
  try {
    const helpText = `ü§ñ *Comandos disponibles:*

!start - Inicia o reinicia el bot
!help - Muestra esta lista de comandos
!reset - Elimina tu sesi√≥n actual y reinicia el bot
!url - Obtiene el enlace directo al √∫ltimo PDF de an√°lisis de CV generado
!promo [c√≥digo] - Activa una promoci√≥n especial (si aplica)

üìÑ *Para revisar tu CV:*
1. Elige "Revisar mi CV" en el men√∫ principal
2. Env√≠a tu CV como archivo PDF o Word
3. El bot analizar√° tu CV y generar√° un PDF personalizado con sugerencias

üé§ *Para simular una entrevista:*
1. Elige "Simular entrevista" en el men√∫ principal
2. Proporciona el nombre del puesto al que est√°s aplicando
3. Responde las preguntas de la entrevista

Si necesitas ayuda adicional, escribe !help o contacta a nuestro equipo de soporte.`;

    await bot.sendMessage(from, helpText);
  } catch (error) {
    logger.error(`Error handling help command: ${error.message}`);
    await bot.sendMessage(from, 'Lo siento, hubo un error al mostrar la ayuda. Por favor, intenta nuevamente m√°s tarde.');
  }
};

const handleInterview = async (from) => {
  try {
    // Obtener sesi√≥n del usuario
    const session = await sessionService.getOrCreateSession(from);

    // Obtener puesto de trabajo
    const jobPosition = session.jobPosition || 'software';

    // Preguntar al usuario si est√° listo para comenzar la entrevista
    try {
      const readyButtons = [
        { id: 'start_interview_now', text: 'Estoy listo' },
        { id: 'cancel_interview', text: 'Cancelar' }
      ];

      await bot.sendButtonMessage(
        from,
        `Vamos a comenzar una simulaci√≥n de entrevista para el puesto de ${jobPosition}. Te har√© 4 preguntas y deber√°s responder con mensajes de audio o video.`,
        readyButtons,
        '¬øEst√°s listo para comenzar?'
      );

      // Actualizar estado para esperar confirmaci√≥n
      await sessionService.updateSessionState(from, sessionService.SessionState.WAITING_INTERVIEW_CONFIRMATION);
      logger.info(`Asked user ${from} if ready to start interview`);
    } catch (buttonError) {
      logger.warn(`Failed to send button message, using text message instead: ${buttonError.message}`);
      await bot.sendMessage(from, `Vamos a comenzar una simulaci√≥n de entrevista para el puesto de ${jobPosition}. Te har√© 4 preguntas y deber√°s responder con mensajes de audio o video.`);
      await bot.sendMessage(from, '¬øEst√°s listo para comenzar? Responde "s√≠" para iniciar la entrevista o "no" para cancelar.');
      await sessionService.updateSessionState(from, sessionService.SessionState.WAITING_INTERVIEW_CONFIRMATION);
    }
  } catch (error) {
    logger.error(`Error preparing interview: ${error.message}`);
    await bot.sendMessage(from, 'Lo siento, hubo un error al preparar la entrevista. Por favor, intenta nuevamente con !start.');
  }
};

/**
 * Inicia la primera pregunta de la entrevista
 * @param {string} from - ID del usuario
 * @returns {Promise<void>}
 */
const startInterviewQuestions = async (from) => {
  try {
    // Obtener sesi√≥n del usuario
    const session = await sessionService.getOrCreateSession(from);

    // Iniciar entrevista
    await sessionService.startInterview(from);

    // Obtener puesto de trabajo
    const jobPosition = session.jobPosition || 'software';

    // Para la primera pregunta, enfocarse en la experiencia y presentaci√≥n
    const questionPrompt = `Pregunta inicial espec√≠fica para alguien que aspira a un puesto de ${jobPosition} sobre experiencia profesional y trayectoria relevante para el puesto. Pregunta corta y directa como si fueras un entrevistador profesional.`;

    // Generar primera pregunta (con fallback a pregunta por defecto)
    let questionData;
    try {
      // Intentar usar OpenAI si est√° disponible
      if (openaiUtil.generateInterviewQuestion) {
        questionData = await openaiUtil.generateInterviewQuestion(jobPosition, questionPrompt);
      } else {
        // Si no est√° disponible la funci√≥n, usar pregunta predefinida
        throw new Error("Funci√≥n generateInterviewQuestion no disponible");
      }
    } catch (error) {
      logger.error(`Error generating interview question: ${error.message}`);
      // Usar preguntas predefinidas en caso de error
      questionData = interviewService.getDefaultQuestion(jobPosition);
      logger.info(`Using default question: ${questionData.question}`);
    }

    // Guardar pregunta en la sesi√≥n
    await sessionService.saveInterviewQuestion(from, questionData);

    // Formatear mensaje
    const questionMessage = `
*Pregunta 1 de 4:*

${questionData.question}

Por favor, responde con un mensaje de audio o video.
`;

    // Enviar pregunta
    await bot.sendMessage(from, questionMessage);
    logger.info(`Sent first interview question to user ${from}`);

    // Actualizar estado
    await sessionService.updateSessionState(from, sessionService.SessionState.QUESTION_ASKED);
  } catch (error) {
    logger.error(`Error starting interview: ${error.message}`);
    await bot.sendMessage(from, 'Lo siento, hubo un error al iniciar la entrevista. Por favor, intenta nuevamente con !start.');
  }
};

const formatAnalysisResults = (analysis) => {
  // Funci√≥n para agregar emojis seg√∫n categor√≠a
  const getCategoryEmoji = (category) => {
    const emojis = {
      experience: 'üíº',
      education: 'üéì',
      skills: 'üîß',
      softSkills: 'ü§ù',
      projects: 'üöÄ',
      improvements: 'üìà',
      recommendations: 'üí°',
      alignment: 'üéØ'
    };
    return emojis[category] || '‚ú®';
  };

  return `
‚ú® *AN√ÅLISIS DE TU CURR√çCULUM* ‚ú®

üìä *Puntuaci√≥n:* ${analysis.score}/100

üìù *Resumen Ejecutivo:*
${analysis.summary}

${getCategoryEmoji('experience')} *Experiencia Relevante:*
${analysis.experience.map(exp => `‚Ä¢ ${exp}`).join('\n')}

${getCategoryEmoji('education')} *Formaci√≥n Acad√©mica:*
${analysis.education.map(edu => `‚Ä¢ ${edu}`).join('\n')}

${getCategoryEmoji('skills')} *Habilidades T√©cnicas:*
${analysis.skills.map(skill => `‚Ä¢ ${skill}`).join('\n')}

${getCategoryEmoji('softSkills')} *Habilidades Blandas:*
${analysis.softSkills.map(skill => `‚Ä¢ ${skill}`).join('\n')}

${getCategoryEmoji('projects')} *Proyectos Destacados:*
${analysis.projects.map(p => `‚Ä¢ ${p}`).join('\n')}

${getCategoryEmoji('improvements')} *Oportunidades de Mejora:*
${analysis.improvements.map(i => `‚Ä¢ ${i}`).join('\n')}

${getCategoryEmoji('recommendations')} *Recomendaciones Personalizadas:*
${analysis.recommendations.map(r => `‚Ä¢ ${r}`).join('\n')}

${getCategoryEmoji('alignment')} *An√°lisis de Alineaci√≥n con el Puesto:*
${analysis.alignment}

¬°√Ånimo! Con peque√±os ajustes, tu CV puede tener un gran impacto. üí™
  `;
};

const formatInterviewFeedback = (feedback, question) => {
  // Obtener emoji para la calificaci√≥n
  const getScoreEmoji = (score) => {
    if (score >= 9) return 'üåü';
    if (score >= 7) return '‚úÖ';
    if (score >= 5) return '‚ö†Ô∏è';
    return '‚ùó';
  };

  const scoreEmoji = getScoreEmoji(feedback.score);

  return `
‚ú® *AN√ÅLISIS DE TU RESPUESTA* ‚ú®

üéØ *Pregunta:* 
${question.question}

${scoreEmoji} *Calificaci√≥n: ${feedback.score}/10*

üìù *Resumen:* 
${feedback.summary}

üí™ *Fortalezas:*
${feedback.strengths.map(s => `‚Ä¢ ‚úì ${s}`).join('\n')}

üîç *Oportunidades de mejora:*
${feedback.weaknesses.map(w => `‚Ä¢ ${w}`).join('\n')}

üí° *Recomendaciones:*
${feedback.suggestions.map(s => `‚Ä¢ üí° ${s}`).join('\n')}

¬°Sigue practicando, vas por buen camino! üöÄ
  `;
};

/**
 * Genera y env√≠a la siguiente pregunta de la entrevista
 * @param {string} from - ID del usuario
 * @returns {Promise<void>}
 */
const handleNextQuestion = async (from) => {
  try {
    // Obtener sesi√≥n del usuario
    const session = await sessionService.getOrCreateSession(from);

    // Verificar si ya se completaron todas las preguntas
    if (session.currentQuestion >= 3) {
      // Actualizar estado antes de mostrar el men√∫ post-entrevista
      await sessionService.updateSessionState(from, sessionService.SessionState.INTERVIEW_COMPLETED);

      // Mostrar men√∫ post-entrevista en lugar de solo un mensaje de felicitaci√≥n
      await showPostInterviewMenu(from);
      return;
    }

    // Incrementar contador de preguntas
    const nextQuestionNumber = session.currentQuestion + 1;

    // Obtener puesto de trabajo
    const jobPosition = session.jobPosition || 'software';

    // Definir diferentes tipos de preguntas seg√∫n el n√∫mero de pregunta
    let questionType = jobPosition;
    let questionPrompt = '';

    switch (nextQuestionNumber) {
      case 1: // Segunda pregunta - enfoque en habilidades t√©cnicas/profesionales
        questionPrompt = `Pregunta espec√≠fica y desafiante para un puesto de ${jobPosition} sobre habilidades profesionales o conocimientos t√©cnicos relevantes para este rol`;
        break;
      case 2: // Tercera pregunta - enfoque en trabajo en equipo o gesti√≥n
        questionPrompt = `Pregunta espec√≠fica sobre trabajo en equipo, colaboraci√≥n o gesti√≥n de proyectos para alguien en el puesto de ${jobPosition}`;
        break;
      case 3: // Cuarta pregunta - enfoque en resoluci√≥n de problemas
        questionPrompt = `Pregunta sobre manejo de situaciones complejas, resoluci√≥n de problemas o toma de decisiones para un profesional en ${jobPosition}`;
        break;
      default:
        questionPrompt = `Pregunta espec√≠fica para un profesional en ${jobPosition} sobre habilidades, experiencia o conocimientos relevantes para este puesto`;
    }

    // Generar siguiente pregunta con el tipo espec√≠fico
    let questionData;
    try {
      // Intentar usar OpenAI si la funci√≥n est√° disponible
      if (openaiUtil.generateInterviewQuestion) {
        questionData = await openaiUtil.generateInterviewQuestion(questionType, questionPrompt);

        // Verificar que la pregunta no sea igual a las anteriores
        if (session.questions && session.questions.length > 0) {
          const previousQuestions = session.questions.map(q => q.question);
          let attempts = 0;

          // Si la pregunta es igual a alguna anterior, generar una nueva (m√°x 3 intentos)
          while (previousQuestions.includes(questionData.question) && attempts < 3) {
            logger.info(`Pregunta repetida detectada, generando nueva pregunta (intento ${attempts + 1})`);
            questionData = await openaiUtil.generateInterviewQuestion(questionType, questionPrompt + " (diferente a las preguntas anteriores)");
            attempts++;
          }
        }
      } else {
        // Si la funci√≥n no est√° disponible, lanzar error para usar las predefinidas
        throw new Error("Funci√≥n generateInterviewQuestion no disponible");
      }
    } catch (error) {
      logger.error(`Error generating next question: ${error.message}`);

      // Usar preguntas predefinidas espec√≠ficas para Tech Lead en caso de error
      questionData = interviewService.getDefaultQuestion(jobPosition);
      logger.info(`Using default question: ${questionData.question}`);

      // Asegurarse de que no se repita la pregunta
      if (session.questions && session.questions.length > 0) {
        const previousQuestions = session.questions.map(q => q.question);
        let attempts = 0;

        // Intentar hasta 5 veces encontrar una pregunta no repetida
        while (previousQuestions.includes(questionData.question) && attempts < 5) {
          questionData = interviewService.getDefaultQuestion(jobPosition);
          attempts++;
        }
      }
    }

    // Guardar pregunta en la sesi√≥n
    await sessionService.saveInterviewQuestion(from, questionData);

    // Formatear mensaje
    const questionMessage = `
*Pregunta ${nextQuestionNumber + 1} de 4:*

${questionData.question}

Por favor, responde con un mensaje de audio o video.
`;

    // Enviar pregunta
    await bot.sendMessage(from, questionMessage);
    logger.info(`Sent question ${nextQuestionNumber + 1} to user ${from}: "${questionData.question}"`);

    // Actualizar estado
    await sessionService.updateSessionState(from, sessionService.SessionState.QUESTION_ASKED);
  } catch (error) {
    logger.error(`Error handling next question: ${error.message}`);
    await bot.sendMessage(from, 'Lo siento, hubo un error al generar la siguiente pregunta. Por favor, intenta nuevamente con !interview.');
  }
};

/**
 * Maneja la informaci√≥n sobre la versi√≥n premium
 * @param {string} from - N√∫mero de tel√©fono del usuario
 */
const handlePremiumInfo = async (from) => {
  try {
    // Primero enviar informaci√≥n sobre la revisi√≥n avanzada
    await bot.sendMessage(from, '*Mas reivisiones* üòä\n\n¬°Excelente!');
    await bot.sendMessage(from, `Las revisiones incluyen:\n\n‚òëÔ∏è An√°lisis de gaps en el CV\n‚òëÔ∏è Fortalezas y debilidades\n‚òëÔ∏è Perfil profesional\n‚òëÔ∏è Experiencia de trabajo\n‚òëÔ∏è Verbos de acci√≥n\n‚òëÔ∏è Estructura del CV\n‚òëÔ∏è Relevancia\n‚òëÔ∏è Y m√°s...`);
    await bot.sendMessage(from, `Puedes adquirir paquetes de revisiones desde S/ 4.00\n\nLas revisiones las puedes usar para tu CV u otros CVs.`);

    // Crear la estructura para el mensaje de lista de paquetes
    try {
      // Definir secciones con los paquetes disponibles
      const packageSections = [
        {
          title: "Paquetes",
          rows: [
            {
              id: "package_1",
              title: "1 Revisi√≥n",
              description: "S/ 4 ‚Äì 1 revisi√≥n"
            },
            {
              id: "package_3",
              title: "3 Revisiones",
              description: "S/ 7 ‚Äì 3 revisiones"
            },
            {
              id: "package_6",
              title: "6 Revisiones",
              description: "S/ 10 ‚Äì 6 revisiones"
            },
            /* {
              id: "package_10",
              title: "10 Revisiones",
              description: "S/ 15 ‚Äì 10 revisiones"
            } */
          ]
        }
      ];

      // Enviar mensaje con lista de paquetes
      await bot.sendListMessage(
        from,
        "Revisi√≥n Avanzada",
        "Selecciona el paquete que deseas adquirir para continuar con tu an√°lisis de CV",
        "Paquetes",
        packageSections
      );

      // A√±adir bot√≥n para regresar al men√∫ principal
      await bot.sendButtonMessage(
        from,
        "¬øNo quieres comprar cr√©ditos ahora?",
        [{ id: "back_to_main_menu", text: "üîô Regresar al men√∫ principal" }],
        "Otras opciones"
      );

      // Actualizar estado para manejar selecci√≥n de paquete
      await sessionService.updateSessionState(from, 'selecting_premium_package');

    } catch (listError) {
      logger.warn(`Failed to send list message: ${listError.message}`);

      // En lugar de enviar una versi√≥n de texto plano del mensaje y un bot√≥n separado,
      // enviar directamente los botones con opciones de paquetes
      const packageButtons = [
        { id: 'package_1', text: 'S/ 4 ‚Äì 1 revisi√≥n' },
        { id: 'package_3', text: 'S/ 7 ‚Äì 3 revisiones' },
        { id: 'package_6', text: 'S/ 10 ‚Äì 6 revisiones' },
        { id: 'back_to_main_menu', text: 'üîô Regresar al men√∫' }
      ];

      await bot.sendButtonMessage(
        from,
        "Selecciona un paquete de revisiones:",
        packageButtons,
        "Paquetes disponibles"
      );

      // Actualizar estado de la sesi√≥n para manejar la selecci√≥n
      await sessionService.updateSessionState(from, 'selecting_premium_package');
    }

  } catch (error) {
    logger.error(`Error handling premium info: ${error.message}`, { error });
    throw error;
  }
};

/**
 * Maneja la selecci√≥n de un paquete premium
 * @param {string} from - N√∫mero de tel√©fono del usuario
 * @param {string} text - Texto del mensaje (selecci√≥n del paquete)
 */
const handlePackageSelection = async (from, text) => {
  try {
    let packageName = '';
    let packagePrice = '';
    let packageReviews = '';

    // Determinar qu√© paquete seleccion√≥ el usuario
    if (text.toLowerCase().includes('4') || text.toLowerCase().includes('1 revisi√≥n') || text.toLowerCase().includes('1 revision')) {
      packageName = '1 Revisi√≥n';
      packagePrice = 'S/4';
      packageReviews = '1';
    } else if (text.toLowerCase().includes('7') || text.toLowerCase().includes('3 revisiones')) {
      packageName = '3 Revisiones';
      packagePrice = 'S/7';
      packageReviews = '3';
    } else if (text.toLowerCase().includes('10') || text.toLowerCase().includes('6 revisiones')) {
      packageName = '6 Revisiones';
      packagePrice = 'S/10';
      packageReviews = '6';
    } else if (text.toLowerCase().includes('15') || text.toLowerCase().includes('10 revisiones')) {
      packageName = '10 Revisiones';
      packagePrice = 'S/15';
      packageReviews = '10';
    } else if (text.toLowerCase().includes('package_1')) {
      packageName = '1 Revisi√≥n';
      packagePrice = 'S/4';
      packageReviews = '1';
    } else if (text.toLowerCase().includes('package_3')) {
      packageName = '3 Revisiones';
      packagePrice = 'S/7';
      packageReviews = '3';
    } else if (text.toLowerCase().includes('package_6')) {
      packageName = '6 Revisiones';
      packagePrice = 'S/10';
      packageReviews = '6';
    } else if (text.toLowerCase().includes('package_10')) {
      packageName = '10 Revisiones';
      packagePrice = 'S/15';
      packageReviews = '10';
    } else {
      // Si no se reconoce el paquete, volver a mostrar las opciones sin mensaje de error
      await handlePremiumInfo(from);
      return;
    }

    // Guardar la selecci√≥n del paquete en la sesi√≥n
    await sessionService.updateSession(from, {
      selectedPackage: packageName,
      packagePrice: packagePrice,
      packageReviews: packageReviews
    });

    // Enviar mensaje confirmando la selecci√≥n y dando instrucciones de pago
    await bot.sendMessage(from, `*${packageReviews} Revisiones*\n${packageReviews} revisiones por ${packagePrice}`);

    await bot.sendMessage(from, `Yapea o Plinea ${packagePrice} a este n√∫mero:\n954600805\n\nEst√° a nombre de "Francesco Lucchesi"`);

    // Enviar opciones para confirmar el pago o volver atr√°s
    const paymentButtons = [
      { id: 'payment_confirmed', text: '¬°Ya pagu√©!' },
      { id: 'payment_back', text: 'Volver atr√°s' }
    ];

    try {
      await bot.sendButtonMessage(
        from,
        `‚úÖ Despu√©s de realizar el pago presiona el bot√≥n ¬°Ya pagu√©!\n\nüîÑ Si quieres cambiar tu paquete de cr√©ditos, presiona el bot√≥n Volver atr√°s`,
        paymentButtons,
        'Confirmaci√≥n de pago'
      );

      // Actualizar estado para manejar la confirmaci√≥n de pago
      await sessionService.updateSessionState(from, 'confirming_payment');

    } catch (buttonError) {
      logger.warn(`Failed to send payment confirmation buttons: ${buttonError.message}`);
      await bot.sendMessage(from, 'Despu√©s de realizar el pago, responde con "pagado". Si quieres cambiar tu paquete, responde con "volver".');
      await sessionService.updateSessionState(from, 'confirming_payment');
    }

  } catch (error) {
    logger.error(`Error handling package selection: ${error.message}`);
    // En lugar de mostrar un mensaje de error, volver a las opciones de paquetes
    await handlePremiumInfo(from);
  }
};

/**
 * Maneja la confirmaci√≥n de pago
 * @param {string} from - N√∫mero de tel√©fono del usuario
 */
const handlePaymentConfirmation = async (from) => {
  try {
    const session = await sessionService.getOrCreateSession(from);
    const packageReviews = session.packageReviews || '1';
    const packagePrice = session.packagePrice || 'S/4';

    // Solicitar captura de pantalla del pago en lugar de confirmar autom√°ticamente
    await bot.sendMessage(from, `‚úÖ *Por favor, env√≠a una captura de pantalla de tu pago de ${packagePrice}*\n\nNecesito verificar:\n‚Ä¢ El Nro de operacion"\n‚Ä¢ La fecha y hora`);

    // Actualizar el estado de la sesi√≥n para esperar la captura
    await sessionService.updateSessionState(from, 'waiting_payment_screenshot');

  } catch (error) {
    logger.error(`Error handling payment confirmation: ${error.message}`);
    await bot.sendMessage(from, 'Ocurri√≥ un error al procesar tu confirmaci√≥n. Por favor, contacta con nuestro soporte.');
  }
};

/**
 * Verifica la captura de pantalla del pago y acredita los cr√©ditos
 * @param {string} from - N√∫mero de tel√©fono del usuario
 * @param {Object} image - Objeto con la informaci√≥n de la imagen
 */
const verifyPaymentScreenshot = async (from, image) => {
  try {
    const session = await sessionService.getOrCreateSession(from);
    const packageReviews = session.packageReviews || '1';
    const packagePrice = session.packagePrice || 'S/4';

    logger.info(`Received payment screenshot from ${from} for ${packageReviews} reviews`);

    // Obtener la URL de la imagen
    let imageUrl;
    try {
      imageUrl = await bot.getMediaUrl(image.id);
      if (!imageUrl) {
        throw new Error('No se pudo obtener la URL de la imagen');
      }
      logger.info(`Payment image URL obtained: ${imageUrl}`);
    } catch (mediaError) {
      logger.error(`Error obtaining image URL: ${mediaError.message}`);
      await bot.sendMessage(from, 'No pudimos acceder a tu imagen. Por favor, intenta enviarla nuevamente.');
      return;
    }

    // Descargar la imagen
    let imageBuffer;
    try {
      imageBuffer = await fileProcessing.downloadFile(imageUrl);
      logger.info(`Payment image downloaded, size: ${imageBuffer.length} bytes`);
    } catch (downloadError) {
      logger.error(`Error downloading image: ${downloadError.message}`);
      await bot.sendMessage(from, 'Hubo un problema al descargar tu imagen. Por favor, intenta enviarla nuevamente.');
      return;
    }

    // Verificar la imagen utilizando OpenAI
    let isValidPayment = false;

    try {
      // Mensaje al usuario indicando que se est√° verificando el pago
      await bot.sendMessage(from, '‚è≥ Estamos verificando tu comprobante de pago...');

      // Convertir imagen a base64
      const imageBase64 = imageBuffer.toString('base64');

      // Consultar a OpenAI para verificar la imagen
      const systemPrompt = `Eres un asistente especializado en verificar comprobantes de pago. Necesitas verificar si la imagen es un comprobante de pago v√°lido y contiene los siguientes elementos:
1. Debe ser un comprobante de pago de Yape, Plin o alguna otra billetera digital peruana
2. El pago debe ser a nombre de "Francesco Lucchesi" o similar
3. El monto debe ser ${packagePrice} soles
4. La fecha debe ser reciente (del mes actual o √∫ltimos 5 d√≠as)

Analiza cuidadosamente la fecha en el comprobante y extrae:
- D√≠a (n√∫mero)
- Mes (nombre o n√∫mero)
- A√±o (n√∫mero completo)

Responde con un JSON que tenga los siguientes campos:
- isValid: true/false seg√∫n si la imagen cumple con todos los requisitos
- recipientName: nombre del destinatario que aparece en el comprobante (si est√° visible)
- amount: monto del pago (si est√° visible)
- date: fecha del pago en formato completo (si est√° visible)
- day: d√≠a del mes extra√≠do (n√∫mero)
- month: mes extra√≠do (nombre o n√∫mero)
- year: a√±o extra√≠do (n√∫mero)
- reason: raz√≥n por la que es v√°lido o inv√°lido`;

      const userPrompt = `Verifica si esta imagen es un comprobante de pago v√°lido de ${packagePrice} a Francesco Lucchesi o Francesco Lucchesi V. Se considera v√°lido si el pago se realiz√≥ recientemente (este mes o en los √∫ltimos 5 d√≠as).`;

      // Llamar a la API de OpenAI para analizar la imagen
      const imageAnalysis = await openaiUtil.analyzeImage(imageBase64, systemPrompt, userPrompt);

      // Parsear la respuesta
      logger.info(`Payment image analysis: ${imageAnalysis}`);

      let analysisResult;
      try {
        // Buscar un JSON en la respuesta
        const jsonMatch = imageAnalysis.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          analysisResult = JSON.parse(jsonMatch[0]);
          logger.info(`Parsed analysis result: ${JSON.stringify(analysisResult)}`);
        } else {
          // Si no encuentra JSON, intentar extraer la validez de la respuesta
          logger.warn("No JSON found in OpenAI response, using text analysis fallback");
          isValidPayment = imageAnalysis.toLowerCase().includes('v√°lido') ||
            imageAnalysis.toLowerCase().includes('valido') ||
            imageAnalysis.toLowerCase().includes('correcto') ||
            imageAnalysis.toLowerCase().includes('francesco lucchesi');

          // Crear un objeto con la informaci√≥n disponible
          analysisResult = {
            isValid: isValidPayment,
            reason: imageAnalysis
          };
        }
      } catch (parseError) {
        logger.error(`Error parsing analysis result: ${parseError.message}`);
        // Intentar determinar si es v√°lido basado en el texto
        isValidPayment = imageAnalysis.toLowerCase().includes('v√°lido') ||
          imageAnalysis.toLowerCase().includes('valido') ||
          imageAnalysis.toLowerCase().includes('correcto');

        analysisResult = {
          isValid: isValidPayment,
          reason: 'No se pudo analizar la respuesta en formato JSON'
        };
      }

      // Como fallback adicional, verificar si la imagen muestra los elementos cr√≠ticos
      // incluso si OpenAI dijo que no era v√°lido
      if (!analysisResult.isValid) {
        logger.info("Payment marked as invalid by OpenAI, checking for critical elements");

        // Verificar si la respuesta menciona los elementos cr√≠ticos de forma positiva
        const hasCorrectName = analysisResult.recipientName &&
          analysisResult.recipientName.toLowerCase().includes('francesco');

        const hasCorrectAmount = analysisResult.amount &&
          analysisResult.amount.includes(packagePrice.replace('S/', ''));

        const isYapeOrPlin = imageAnalysis.toLowerCase().includes('yape') ||
          imageAnalysis.toLowerCase().includes('plin');

        // MODIFICACI√ìN: Ya no verificamos la fecha, solo el nombre y el monto
        // Nombre: Francesco o Francesco Lucchesi
        // Monto: debe coincidir con el precio del paquete

        // Si tiene el nombre y monto correctos, considerarlo v√°lido
        // Ya no verificamos la fecha ni la plataforma
        if ((hasCorrectName || imageAnalysis.toLowerCase().includes('francesco')) &&
          (hasCorrectAmount || imageAnalysis.toLowerCase().includes(packagePrice))) {
          logger.info("Critical elements found (name and amount), overriding OpenAI result to VALID");
          analysisResult.isValid = true;
          analysisResult.reason = "Pago verificado: contiene el nombre y monto correctos";
        }
      }

      isValidPayment = analysisResult.isValid;

      if (isValidPayment) {
        logger.info(`Payment validated successfully for user ${from}`);

        // Extraer el monto del precio (convertir 'S/4' a 4)
        const priceValue = parseFloat(packagePrice.replace('S/', ''));

        // Actualizar el contador de cr√©ditos del usuario
        await userService.addCVCredits(from, parseInt(packageReviews));

        // Registrar la transacci√≥n
        await userService.recordTransaction(
          from,
          priceValue,
          'cv_credits',
          `Compra de ${packageReviews} cr√©ditos para an√°lisis de CV`
        );

        // Enviar confirmaci√≥n de que el pago ha sido verificado
        await bot.sendMessage(from, `‚úÖ *¬°Pago verificado!*\n\nSe han a√±adido ${packageReviews} cr√©ditos a tu cuenta. Ya puedes analizar m√°s CVs.`);

        // Restablecer el estado de CV procesado para permitir un nuevo an√°lisis
        await sessionService.updateSession(from, { cvProcessed: false });

        // Ofrecer botones para elegir si revisar CV inmediatamente o ir al men√∫ principal
        const postPaymentButtons = [
          { id: 'review_cv', text: 'üìã Revisar mi CV' },
          { id: 'back_to_main_menu', text: 'üè† Ir al Men√∫' }
        ];

        try {
          await bot.sendButtonMessage(
            from,
            '¬øQu√© deseas hacer ahora? Puedes revisar tu CV en este momento o volver al men√∫ principal para usar tus cr√©ditos m√°s tarde.',
            postPaymentButtons,
            'Opciones despu√©s del pago'
          );

          // Actualizar el estado de la sesi√≥n a "payment_completed"
          await sessionService.updateSessionState(from, 'payment_completed');
        } catch (buttonError) {
          logger.warn(`Failed to send post-payment buttons: ${buttonError.message}`);
          // Si no se pueden enviar los botones, enviar mensaje normal
          await bot.sendMessage(from, 'Para usar tus cr√©ditos, simplemente env√≠a el CV que deseas analizar o escribe !start para ir al men√∫ principal.');
          await sessionService.updateSessionState(from, 'waiting_for_cv');
        }
      } else {
        // El pago no es v√°lido
        logger.warn(`Invalid payment image from user ${from}: ${analysisResult.reason}`);

        // Informar al usuario por qu√© el pago fue rechazado
        let rejectionReason = "no pudimos verificar que cumpla con los requisitos";

        if (analysisResult.reason) {
          rejectionReason = analysisResult.reason;
        } else {
          // Intentar determinar la raz√≥n espec√≠fica
          if (analysisResult.amount && analysisResult.amount !== packagePrice.replace('S/', '')) {
            rejectionReason = `el monto no coincide con el precio del paquete (${packagePrice})`;
          } else if (analysisResult.recipientName && !analysisResult.recipientName.toLowerCase().includes('francesco')) {
            rejectionReason = "el destinatario no parece ser Francesco Lucchesi";
          } else {
            rejectionReason = "no pudimos verificar claramente el pago";
          }
        }

        // Mensaje para el usuario
        await bot.sendMessage(from, `‚ö†Ô∏è *No pudimos verificar tu pago*\n\nMotivo: ${rejectionReason}\n\nPor favor, aseg√∫rate de que:\n‚Ä¢ El pago sea a Francesco Lucchesi\n‚Ä¢ El monto sea de ${packagePrice}\n\nEnv√≠a una nueva captura cuando lo hayas corregido.`);

        // Mantener al usuario en el mismo estado para que pueda volver a intentar
        await sessionService.updateSessionState(from, 'waiting_payment_screenshot');
      }
    } catch (aiError) {
      logger.error(`Error verifying payment with OpenAI: ${aiError.message}`);

      // Informar al usuario del error t√©cnico
      await bot.sendMessage(from, "‚ùå Lo sentimos, tuvimos un problema t√©cnico al verificar tu pago. Por favor, intenta nuevamente en unos minutos o contacta a soporte si el problema persiste.");

      // Mantener al usuario en el mismo estado para que pueda volver a intentar
      await sessionService.updateSessionState(from, 'waiting_payment_screenshot');
    }

  } catch (error) {
    logger.error(`Error verifying payment screenshot: ${error.message}`);
    await bot.sendMessage(from, 'Ocurri√≥ un error al verificar tu pago. Por favor, contacta con nuestro soporte.');
  }
};

/**
 * Manejar la respuesta de un bot√≥n
 * @param {string} from - ID del usuario
 * @param {string} buttonId - ID del bot√≥n presionado
 * @returns {Promise<void>}
 */
const handleButtonReply = async (from, buttonId) => {
  logger.info(`Button reply received from user ${from}: ${buttonId}`);

  try {
    // Obtener el estado actual de la sesi√≥n
    const session = await sessionService.getOrCreateSession(from);
    const currentState = session.state;
    logger.info(`Session retrieved for user: ${from}, state: ${currentState}`);

    // Si el ID comienza con 'package_', redirigir a handlePackageSelection
    if (buttonId.startsWith('package_')) {
      logger.info(`Redirecting package selection from button handler: ${buttonId}`);
      await handlePackageSelection(from, buttonId);
      return;
    }

    // Manejar los diferentes botones seg√∫n su ID
    switch (buttonId) {
      case 'review_cv':
        await handleMenuSelection(from, 'review_cv');
        break;
      case 'interview_simulation':
        await handleMenuSelection(from, 'interview_simulation');
        break;
      case 'back_to_main_menu':
        await sessionService.resetSession(from);
        await handleStart(from);
        break;
      case 'buy_credits':
        await handlePremiumInfo(from);
        break;
      case 'start_interview_now':
        await startInterviewQuestions(from);
        break;
      case 'cancel_interview':
        await sessionService.resetSession(from);
        await handleStart(from);
        break;
      case 'start_interview':
        await sessionService.updateSessionState(from, sessionService.SessionState.POSITION_RECEIVED);
        await handleInterview(from);
        break;
      case 'accept_terms':
        // Usuario acepta los t√©rminos y condiciones
        logger.info(`User ${from} accepted terms and conditions`);

        // En lugar de guardarlo en la sesi√≥n, simplemente mostramos el mensaje de bienvenida
        await showWelcomeMessage(from);
        break;
      case 'reject_terms':
        // Usuario rechaza los t√©rminos y condiciones
        logger.info(`User ${from} rejected terms and conditions`);

        // Informar al usuario que debe aceptar los t√©rminos para usar el servicio
        await bot.sendMessage(from, 'Para utilizar nuestros servicios es necesario aceptar los t√©rminos y condiciones. Sin esta aceptaci√≥n, no podemos continuar.');

        // Volver a mostrar los t√©rminos y condiciones
        await handleTermsAndConditions(from);
        break;
      case 'continue_interview':
        await handleNextQuestion(from);
        break;
      case 'stop_interview':
        await bot.sendMessage(from, 'Has detenido la entrevista. Si deseas volver a intentarlo, env√≠a !start para comenzar de nuevo.');
        await sessionService.resetSession(from);
        await handleStart(from);
        break;
      case 'personalized_advice':
        await handleAdvisorService(from);
        break;
      case 'accept_advisor':
        await bot.sendMessage(from, `Yapea o Plinea S/60 a este n√∫mero:\n954600805\n\nEst√° a nombre de "Francesco Lucchesi"`);

        const paymentButtons = [
          { id: 'advisor_payment_confirmed', text: '¬°Ya pagu√©!' },
          { id: 'back_to_advisor', text: 'Volver atr√°s' }
        ];

        try {
          await bot.sendButtonMessage(
            from,
            `‚úÖ Despu√©s de realizar el pago presiona el bot√≥n ¬°Ya pagu√©!\n\nüîÑ Si quieres cancelar, presiona el bot√≥n Volver atr√°s`,
            paymentButtons,
            'Confirmaci√≥n de pago'
          );

          await sessionService.updateSessionState(from, 'confirming_advisor_payment');

        } catch (buttonError) {
          logger.warn(`Failed to send payment confirmation buttons: ${buttonError.message}`);
          await bot.sendMessage(from, 'Despu√©s de realizar el pago, responde con "pagado". Si quieres volver, responde con "volver".');
          await sessionService.updateSessionState(from, 'confirming_advisor_payment');
        }
        break;
      case 'advisor_cv_review':
      case 'advisor_interview':
        const advisorType = buttonId === 'advisor_cv_review' ? 'Revisi√≥n de CV' : 'Simulaci√≥n de Entrevista';

        await sessionService.updateSession(from, {
          advisorType: advisorType
        });

        logger.info(`User ${from} selected advisor type: ${advisorType}`);

        const serviceDescription = buttonId === 'advisor_cv_review'
          ? '‚Ä¢ Evaluaci√≥n profesional de tu CV\n‚Ä¢ Recomendaciones para estructura y contenido\n‚Ä¢ Consejos para destacar tus logros\n‚Ä¢ Correcci√≥n de errores comunes'
          : '‚Ä¢ Pr√°ctica realista de entrevistas\n‚Ä¢ Feedback detallado sobre tu desempe√±o\n‚Ä¢ Consejos para responder preguntas dif√≠ciles\n‚Ä¢ T√©cnicas para destacar tus habilidades';

        const advisorMessage = `
*üåü ASESOR√çA PERSONALIZADA EN ${advisorType.toUpperCase()} üåü*

Con√©ctate con uno de nuestros especialistas en Recursos Humanos de √©lite que trabajan con las empresas m√°s prestigiosas del mercado.

*‚úÖ Este servicio incluye:*
${serviceDescription}

*üí∞ Inversi√≥n: S/60*

¬øDeseas agendar esta asesor√≠a personalizada?
`;

        const advisorButtons = [
          { id: 'accept_advisor', text: 'ACEPTAR' },
          { id: 'back_to_advisor', text: 'Regresar' }
        ];

        try {
          await bot.sendButtonMessage(
            from,
            advisorMessage,
            advisorButtons,
            'Asesor√≠a Personalizada'
          );

          await sessionService.updateSessionState(from, 'advisor_service_selection');

        } catch (buttonError) {
          logger.warn(`Failed to send advisor service buttons: ${buttonError.message}`);

          await bot.sendMessage(from, `${advisorMessage}\n\nPara continuar, responde "ACEPTAR" o "REGRESAR".`);
          await sessionService.updateSessionState(from, 'advisor_service_selection');
        }
        break;
      case 'advisor_payment_confirmed':
        await handleAdvisorPaymentConfirmation(from);
        break;
      case 'back_to_advisor':
        await handleAdvisorService(from);
        break;
      case 'payment_back':
        logger.info(`User ${from} wants to go back to package selection`);
        await handlePremiumInfo(from);
        break;
      case 'payment_confirmed':
        logger.info(`User ${from} confirmed payment`);
        await handlePaymentConfirmation(from);
        break;
      case 'new_interview':
        await handleInterview(from);
        break;
      default:
        logger.warn(`Unrecognized button ID: ${buttonId}`);
        await bot.sendMessage(from, 'No reconoc√≠ esa opci√≥n. Por favor, env√≠a !start para comenzar de nuevo.');
    }
  } catch (error) {
    logger.error(`Error handling button reply: ${error.message}`);
    //await bot.sendMessage(from, 'Lo siento, hubo un error al procesar tu selecci√≥n. Por favor, intenta nuevamente.');
  }
};

/**
 * Muestra los botones de opciones despu√©s del an√°lisis de CV
 * @param {string} from - N√∫mero de tel√©fono del usuario
 * @param {Object} analysis - Resultados del an√°lisis (opcional)
 */
const sendPostCVOptions = async (from, analysis = null) => {
  try {
    // Verificar si el usuario ya ha analizado un CV antes
    const totalAnalysisCount = await userService.getCVAnalysisCount(from);
    const hasAnalyzedCVBefore = totalAnalysisCount > 1;
    logger.info(`Session retrieved for user: ${from}, state: ${await sessionService.getOrCreateSession(from).then(session => session.state)}`);

    // Definir las opciones del men√∫ post-an√°lisis
    let menuButtons = [
      { id: 'start_interview', text: 'üéØ Simular entrevista' }
    ];

    // Para la opci√≥n de revisar CV, mostrar el mismo texto independientemente si ya ha analizado uno antes
    if (hasAnalyzedCVBefore) {
      menuButtons.push({ id: 'premium_required', text: 'üìã Revisar CV' });
    } else {
      menuButtons.push({ id: 'review_cv_again', text: 'üìã Revisar CV' });
    }

    // Agregar la opci√≥n de regresar al men√∫ principal
    menuButtons.push({ id: 'back_to_main_menu', text: 'üîô Regresar al men√∫' });

    // Actualizar estado de la sesi√≥n para manejar correctamente la respuesta
    await sessionService.updateSessionState(from, 'post_cv_options');

    try {
      // Comentamos el mensaje con los botones principales
      /* 
      await bot.sendButtonMessage(
        from,
        '¬øQu√© te gustar√≠a hacer ahora?',
        menuButtons,
        'Opciones disponibles:'
      );
      logger.info(`Post-CV analysis options sent to user ${from}`);
      */

      // Enviar mensaje adicional ofreciendo asesor√≠a personalizada
      const advisorButtons = [
        { id: 'advisor_cv_review', text: '‚úÖ ACEPTAR' },
        { id: 'back_to_main_menu', text: 'üîô Regresar al men√∫' }
      ];

      try {
        await bot.sendButtonMessage(
          from,
          '¬øQuieres que un especialista en RRHH revise detalladamente tu CV? Recibe asesor√≠a personalizada para destacar en procesos de selecci√≥n.',
          advisorButtons,
          'Asesor√≠a Profesional CV'
        );
      } catch (advisorButtonError) {
        logger.warn(`Failed to send advisor button: ${advisorButtonError.message}`);
        // Enviar mensaje de texto alternativo si falla el env√≠o de botones
        await bot.sendTextMessage(
          from,
          '¬øQuieres que un especialista en RRHH revise detalladamente tu CV?\n\nResponde "asesor√≠a cv" para recibir asesor√≠a personalizada o "regresar" para volver al men√∫ principal.'
        );
      }

    } catch (buttonError) {
      logger.warn(`Failed to send button message, using text message instead: ${buttonError.message}`);
      await bot.sendMessage(from, 'Lo siento, hubo un error al enviar las opciones de post-an√°lisis. Por favor, intenta nuevamente.');
    }
  } catch (error) {
    logger.error(`Error sending post-CV options: ${error.message}`);
    await bot.sendMessage(from, 'Lo siento, hubo un error al enviar las opciones de post-an√°lisis. Por favor, intenta nuevamente.');
  }
};

// Funci√≥n para mostrar men√∫ despu√©s de completar la entrevista
const showPostInterviewMenu = async (from) => {
  try {
    logger.info(`Showing post-interview menu to user ${from}`);

    // Mensaje de felicitaci√≥n por completar la entrevista
    const congratsMessage = `
üéâ *¬°FELICIDADES!* üéâ

Has completado todas las preguntas de la entrevista. ¬°Excelente trabajo! üëè

‚ú® Espero que el feedback te haya sido √∫til para mejorar tus habilidades en entrevistas.
    `;

    // Primero enviamos el mensaje de felicitaci√≥n
    await bot.sendMessage(from, congratsMessage);

    // Esperamos un segundo antes de enviar los botones para evitar l√≠mites de velocidad
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Actualizar estado de la sesi√≥n
    await sessionService.updateSessionState(from, 'post_interview_menu');

    // Definir botones para el men√∫ post-entrevista
    const menuButtons = [
      { id: 'review_cv', text: 'üìã Revisar CV' },
      { id: 'new_interview', text: 'üéØ Nueva Entrevista' },
      { id: 'back_to_main_menu', text: 'üîô Regresar al men√∫' }
    ];

    // Comentamos el mensaje con los botones principales
    /*
    // Enviar mensaje con botones interactivos
    await bot.sendButtonMessage(
      from,
      '¬øQu√© te gustar√≠a hacer ahora?',
      menuButtons,
      'Opciones disponibles:'
    );
    logger.info(`Post-interview menu sent to user ${from}`);
    */

    // Enviar mensaje adicional ofreciendo asesor√≠a personalizada para entrevistas
    const advisorButtons = [
      { id: 'advisor_interview', text: '‚úÖ ACEPTAR' },
      { id: 'back_to_main_menu', text: 'üîô Regresar al men√∫' }
    ];

    try {
      await bot.sendButtonMessage(
        from,
        '¬øQuieres mejorar tus habilidades para entrevistas con un especialista en RRHH? Recibe asesor√≠a personalizada para destacar en tus pr√≥ximas entrevistas laborales.',
        advisorButtons,
        'Asesor√≠a Profesional Entrevistas'
      );
    } catch (advisorButtonError) {
      logger.warn(`Failed to send advisor button: ${advisorButtonError.message}`);
      // Enviar mensaje de texto alternativo si falla el env√≠o de botones
      await bot.sendTextMessage(
        from,
        '¬øQuieres mejorar tus habilidades para entrevistas con un especialista en RRHH?\n\nResponde "asesor√≠a entrevista" para recibir asesor√≠a personalizada o "regresar" para volver al men√∫ principal.'
      );
    }

  } catch (error) {
    logger.error(`Error sending post-interview menu: ${error.message}`);
    // Mensaje de texto alternativo si falla
    await bot.sendTextMessage(
      from,
      'Lo siento, hubo un error al enviar las opciones despu√©s de la entrevista. Por favor, intenta nuevamente.\n\nPuedes escribir "revisar" para analizar tu CV, "entrevista" para una nueva simulaci√≥n o "!start" para regresar al men√∫ principal.'
    );
  }
};

/**
 * Maneja la solicitud de servicio de asesor√≠a personalizada
 * @param {string} from - ID del usuario
 * @returns {Promise<void>}
 */
const handleAdvisorService = async (from) => {
  try {
    logger.info(`User ${from} requested advisor service`);

    // Preguntar primero qu√© tipo de asesor√≠a desea
    try {
      const advisorTypeButtons = [
        { id: 'advisor_cv_review', text: 'Asesoria CV' },
        { id: 'advisor_interview', text: 'Asesoria Entrevista' }
      ];

      await bot.sendButtonMessage(
        from,
        '¬øQu√© tipo de asesor√≠a personalizada te gustar√≠a recibir?',
        advisorTypeButtons,
        'Selecciona una opci√≥n:'
      );

      // Actualizar estado para manejar la selecci√≥n del tipo de asesor√≠a
      await sessionService.updateSessionState(from, 'selecting_advisor_type');

    } catch (buttonError) {
      logger.warn(`Failed to send advisor type buttons: ${buttonError.message}`);
      await bot.sendMessage(from, 'Por favor, responde si deseas una asesor√≠a para "Revisar CV" o "Simular Entrevista".');
      await sessionService.updateSessionState(from, 'selecting_advisor_type');
    }
  } catch (error) {
    logger.error(`Error handling advisor service: ${error.message}`);
    await bot.sendMessage(from, 'Lo siento, hubo un error al procesar tu solicitud. Por favor, intenta nuevamente con !start.');
  }
};

/**
 * Maneja la confirmaci√≥n de pago para asesor√≠a personalizada
 * @param {string} from - ID del usuario
 */
const handleAdvisorPaymentConfirmation = async (from) => {
  try {
    // Solicitar captura de pantalla del pago
    await bot.sendMessage(from, `‚úÖ *Por favor, env√≠a una captura de pantalla de tu pago de S/60*\n\nNecesito verificar:\n‚Ä¢ El nro de operacion"\n‚Ä¢ La fecha y hora sea reciente`);

    // Actualizar el estado de la sesi√≥n para esperar la captura
    await sessionService.updateSessionState(from, 'waiting_advisor_payment_screenshot');

  } catch (error) {
    logger.error(`Error handling advisor payment confirmation: ${error.message}`);
    await bot.sendMessage(from, 'Ocurri√≥ un error al procesar tu confirmaci√≥n. Por favor, contacta con nuestro soporte.');
  }
};

/**
 * Verifica la captura de pantalla del pago de asesor√≠a y proporciona el enlace de Calendly
 * @param {string} from - ID del usuario
 * @param {Object} image - Objeto con la informaci√≥n de la imagen
 */
const verifyAdvisorPaymentScreenshot = async (from, image) => {
  try {
    logger.info(`Received advisor payment screenshot from ${from}`);

    // Obtener la URL de la imagen
    let imageUrl;
    try {
      imageUrl = await bot.getMediaUrl(image.id);
      if (!imageUrl) {
        throw new Error('No se pudo obtener la URL de la imagen');
      }
      logger.info(`Advisor payment image URL obtained: ${imageUrl}`);
    } catch (mediaError) {
      logger.error(`Error obtaining image URL: ${mediaError.message}`);
      await bot.sendMessage(from, 'No pudimos acceder a tu imagen. Por favor, intenta enviarla nuevamente.');
      return;
    }

    // Descargar la imagen
    let imageBuffer;
    try {
      imageBuffer = await fileProcessing.downloadFile(imageUrl);
      logger.info(`Advisor payment image downloaded, size: ${imageBuffer.length} bytes`);
    } catch (downloadError) {
      logger.error(`Error downloading payment image: ${downloadError.message}`);
      await bot.sendMessage(from, 'Hubo un error al procesar tu imagen. Por favor, intenta nuevamente.');
      return;
    }

    // Notificar al usuario que estamos procesando su pago
    await bot.sendMessage(from, '‚è≥ Estamos verificando tu comprobante de pago...');

    // Obtener el tipo de asesor√≠a seleccionada
    const session = await sessionService.getOrCreateSession(from);
    const advisorType = session.advisorType || 'Personalizada';

    // Implementar verificaci√≥n con OpenAI Vision
    let isValidPayment = false;

    try {
      // Convertir imagen a base64
      const imageBase64 = imageBuffer.toString('base64');

      // Consultar a OpenAI para verificar la imagen
      const systemPrompt = `Eres un asistente especializado en verificar comprobantes de pago. Necesitas verificar si la imagen es un comprobante de pago v√°lido y contiene los siguientes elementos:
1. Debe ser un comprobante de pago de Yape, Plin o alguna otra billetera digital peruana
2. El pago debe ser a nombre de "Francesco Lucchesi" o similar
3. El monto debe ser S/60 soles

Responde con un JSON que tenga los siguientes campos:
- isValid: true si el nombre y monto son correctos, false en caso contrario
- recipientName: nombre del destinatario que aparece en el comprobante (si est√° visible)
- amount: monto del pago (si est√° visible)
- reason: raz√≥n por la que es v√°lido o inv√°lido (enfoc√°ndose en nombre y monto)`;

      const userPrompt = `Verifica si esta imagen es un comprobante de pago v√°lido de S/60 a Francesco Lucchesi o Francesco Lucchesi V. Ignora la fecha del comprobante, solo valida el nombre y el monto.`;

      // Llamar a la API de OpenAI para analizar la imagen
      const imageAnalysis = await openaiUtil.analyzeImage(imageBase64, systemPrompt, userPrompt);

      // Parsear la respuesta
      logger.info(`Advisor payment image analysis: ${imageAnalysis}`);

      let analysisResult;
      try {
        // Buscar un JSON en la respuesta
        const jsonMatch = imageAnalysis.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          analysisResult = JSON.parse(jsonMatch[0]);
          logger.info(`Parsed advisor analysis result: ${JSON.stringify(analysisResult)}`);
        } else {
          // Si no encuentra JSON, intentar extraer la validez de la respuesta
          logger.warn("No JSON found in OpenAI response, using text analysis fallback");
          isValidPayment = imageAnalysis.toLowerCase().includes('v√°lido') ||
            imageAnalysis.toLowerCase().includes('valido') ||
            imageAnalysis.toLowerCase().includes('correcto') ||
            imageAnalysis.toLowerCase().includes('francesco lucchesi');

          // Crear un objeto con la informaci√≥n disponible
          analysisResult = {
            isValid: isValidPayment,
            reason: imageAnalysis
          };
        }
      } catch (parseError) {
        logger.error(`Error parsing OpenAI response: ${parseError.message}`);
        // Si hay error al parsear, intentar extraer la validez del texto
        isValidPayment = imageAnalysis.toLowerCase().includes('v√°lido') ||
          imageAnalysis.toLowerCase().includes('valido') ||
          imageAnalysis.toLowerCase().includes('correcto') ||
          imageAnalysis.toLowerCase().includes('francesco lucchesi');

        analysisResult = {
          isValid: isValidPayment,
          reason: "Pago verificado: contiene el nombre y monto correctos"
        };
      }

      // Verificar si el pago es v√°lido
      isValidPayment = analysisResult.isValid;

      if (isValidPayment) {
        logger.info(`Advisor payment validated successfully for user ${from}`);

        // Actualizar el estado de la sesi√≥n
        await sessionService.updateSession(from, {
          advisorPaymentVerified: true,
          advisorPaymentDate: new Date().toISOString()
        });

        // Enviar confirmaci√≥n de que el pago ha sido verificado
        await bot.sendMessage(from, `‚úÖ *¬°Pago verificado!*\n\nTu pago de S/60 por la asesor√≠a ${advisorType} ha sido confirmado. \n Gracias por adquirir nuestra asesor√≠a Simulaci√≥n de Entrevista.

üìÖ Agenda tu cita ahora mismo en este enlace:
https://calendly.com/psicologa-workin2/30min

üëÜ Haz clic en el enlace para elegir la fecha y hora que mejor se adapte a tu disponibilidad.

Si tienes alguna duda, no dudes en escribirnos.`);

        // Enviar opciones post-pago
        const postPaymentButtons = [
          { id: 'back_to_main_menu', text: 'üè† Volver al men√∫' }
        ];

        try {
          await bot.sendButtonMessage(
            from,
            '¬øQu√© te gustar√≠a hacer ahora?',
            postPaymentButtons,
            'Opciones despu√©s del pago'
          );
        } catch (buttonError) {
          logger.warn(`Failed to send post-payment buttons: ${buttonError.message}`);
          await bot.sendMessage(from, 'Escribe *!menu* para volver al men√∫ principal.');
        }

        // Actualizar el estado de la sesi√≥n
        await sessionService.updateSessionState(from, 'advisor_payment_completed');

      } else {
        // El pago no es v√°lido
        logger.warn(`Invalid advisor payment image from user ${from}: ${analysisResult.reason}`);

        // Determinar la raz√≥n del rechazo
        let rejectionReason = analysisResult.reason || "no pudimos verificar claramente el pago";

        // Informar al usuario por qu√© el pago fue rechazado
        await bot.sendMessage(from, `‚ö†Ô∏è *No pudimos verificar tu pago*\n\nPor favor, aseg√∫rate de que:\n‚Ä¢ El Nro de operacion sea correcto\n\n *Env√≠a una nueva captura cuando lo hayas corregido.*`);
      }

    } catch (error) {
      logger.error(`Error verifying advisor payment: ${error.message}`);
      await bot.sendMessage(from, 'Hubo un error al verificar tu pago. Por favor, intenta enviar la imagen nuevamente.');
    }
  } catch (error) {
    logger.error(`Error in advisor payment verification: ${error.message}`);
    await bot.sendMessage(from, 'Lo siento, hubo un error al procesar tu pago. Por favor, intenta nuevamente m√°s tarde.');
  }
};

/**
 * Muestra pantalla de t√©rminos y condiciones con botones para aceptar o rechazar
 * @param {string} from - ID del usuario
 * @returns {Promise<void>}
 */
const handleTermsAndConditions = async (from) => {
  try {
    logger.info(`Showing terms and conditions for user ${from}`);

    // Mensaje de t√©rminos y condiciones
    const termsMessage = `
Bienvenido a Worky‚ú®

Antes de continuar, revisa los siguientes enlaces:

T√©rminos y condiciones: https://www.workin2.com/terminos

Privacidad: https://www.workin2.com/privacidad

Al continuar, aceptas nuestros t√©rminos, nuestra pol√≠tica de privacidad.
    `;

    // Intentar enviar los botones interactivos
    const termsButtons = [
      { id: 'accept_terms', text: 'Acepto' },
      { id: 'reject_terms', text: 'No acepto' }
    ];

    try {
      // Usar el formato correcto de botones interactivos - sin headerText para usar el footer en su lugar
      await bot.sendButtonMessage(
        from,
        termsMessage,
        termsButtons
      );
    } catch (buttonError) {
      logger.error(`Error sending terms buttons: ${buttonError.message}`);
      // Fallback a mensaje de texto si fallan los botones
      await bot.sendMessage(from, `${termsMessage}\n\nPor favor, responde "S√≠" para aceptar o "No" para rechazar los t√©rminos y condiciones.`);
    }

    // Actualizar el estado para manejar la respuesta
    await sessionService.updateSessionState(from, 'terms_acceptance');
    logger.info(`Terms and conditions sent to user ${from}`);
  } catch (error) {
    logger.error(`Error showing terms and conditions: ${error.message}`);
    // En caso de error, mostrar directamente el mensaje de bienvenida como fallback
    await showWelcomeMessage(from);
  }
};

/**
 * Muestra el mensaje de bienvenida con las opciones principales
 * @param {string} from - ID del usuario
 * @returns {Promise<void>}
 */
const showWelcomeMessage = async (from) => {
  try {
    // Mensaje de bienvenida mejorado con emojis y estilo m√°s personal
    const welcomeMessage = `
¬°Hola! üëã Soy tu asistente virtual de *MyWorkIn* ü§ñ

Estoy aqu√≠ para ayudarte a destacar en tu b√∫squeda de empleo:

üîç *An√°lisis de CV personalizado*
üíº *Simulaci√≥n de entrevistas*
üë®‚Äçüíº *Asesor√≠a laboral con psic√≥logos por videollamada*

¬øC√≥mo te gustar√≠a que te ayude hoy?
    `;

    // Intentar enviar botones para una mejor experiencia
    try {
      const menuButtons = [
        { id: 'review_cv', text: 'üìã Revisar mi CV' },
        { id: 'interview_simulation', text: 'üéØ Simular entrevista' },
        { id: 'personalized_advice', text: 'üë®‚Äçüíº Asesor√≠a' }
      ];

      await bot.sendButtonMessage(
        from,
        welcomeMessage,
        menuButtons,
        ''
      );

      await sessionService.updateSessionState(from, sessionService.SessionState.INITIAL);
    } catch (buttonError) {
      logger.warn(`Failed to send button message, using text fallback: ${buttonError.message}`);

      // Mensaje de texto alternativo si fallan los botones
      await bot.sendMessage(from, `${welcomeMessage}\n\nEnv√≠a tu CV como documento para comenzar con el an√°lisis o escribe *!interview* para simular una entrevista.`);
      await sessionService.updateSessionState(from, sessionService.SessionState.INITIAL);
    }
  } catch (error) {
    logger.error(`Error showing welcome message: ${error.message}`);
    await bot.sendMessage(from, 'üòì Lo siento, ha ocurrido un error. Por favor, intenta nuevamente enviando *!start*.');
  }
};

// Exportar todas las funciones necesarias
module.exports = {
  handleStart,
  handleDocument,
  handleText,
  handleImage,
  handleAudio,
  handleVideo,
  handleUnknown,
  handleHelp,
  handleInterview,
  handleNextQuestion,
  handleMenuSelection,
  handlePremiumInfo,
  handlePackageSelection,
  handlePaymentConfirmation,
  verifyPaymentScreenshot,
  startInterviewQuestions,
  handleButtonReply,
  formatAnalysisResults,
  sendPostCVOptions,
  showPostInterviewMenu,
  handleAdvisorService,
  handleAdvisorPaymentConfirmation,
  verifyAdvisorPaymentScreenshot,
  handleTermsAndConditions
};
